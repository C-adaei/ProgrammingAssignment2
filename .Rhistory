install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
setwd("C:/Users/FelipoDRS/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vetor <- makeVector(c(1,2,3,4))
vetor
vetor[1]
vetor[2]
get.vetor()
get.vetor
vetor[[1]]
vetor <- makeVector(c(1,2,3,4,5))
vetor2 <- makeVector(c(1,2,3,4,5))
vetor2[[3]]
vetor2[[4]]()
vetor2[[1]]()
vetor2[[2]]()
vetor2[[3]](mean(vetor2[[2]]))
vetor2[[3]](mean(vetor2[[2]]()))
vetor2[[4]]
vetor2[[4]]()
help(solve)
mat <- c(1,2;2,1)
mat <- matrix(c(1,2,2,1),nrow=2,ncol=2)
mat
solve(mat)
makeCacheMatrix <- function(x = matrix()) {
IM <- NULL
set <- function(y) {
x <<- y
IM <<- NULL
}
get <- function() x
setsolution <- function(Inverted_Matrix) IM <<- Inverted_Matrix
getsolution <- function() IM
list(set = set, get = get,
setsolution = setsolution,
getsolution = getsolution)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
IM <- x$getsolution()
if(!is.null(IM)) {
message("getting cached data")
return(IM)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(IM)
IM
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(mat)
teste <- makeCacheMatrix(mat)
cacheSolve(teste)
rm(cacheSolve)
cacheSolve <- function(x, ...) {
IM <- x$getsolution()
if(!is.null(IM)) {
message("getting cached data")
return(IM)
}
data <- x$get()
IM <- solve(data, ...)
x$setsolution(IM)
IM
## Return a matrix that is the inverse of 'x'
}
teste <- makeCacheMatrix(mat)
teste2 <- cacheSolve(teste)
teste3
teste2
mat$setsolution(matrix(c(3,2,2,3),nrow=2,ncol=2))
teste$setsolution(matrix(c(3,2,2,3),nrow=2,ncol=2))
teste3 <- cacheSolve(teste)
teste3
